pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time:30, unit:'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
        //retry(1)
    }
    parameters{
        choice(name: 'ACTION', choices: ['APPLY', 'DESTROY'], description: 'Select Action')

    }
   

    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                    sh """
                        cd 90-cdn
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }
        
        stage('Apply or Destroy') {
            /* input {
                message "Should we continue to $params.ACTION?"
                ok "Yes,we should."
            }  */    
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                    sh """
                        cd 90-cdn
                        if [$params.ACTION == 'APPLY']
                        then
                            terraform apply -auto-approve tfplan
                        // elif [$params.ACTION == 'DESTROY']
                        // then
                        //     terraform destroy -auto-approve
                        fi
                    """    
                }
            }
        }
       /* stage('Parallel-1') {
            when{
                expression { params.ACTION == 'DESTROY'}
            }
            parallel {
                stage('ECR') {
                    steps {
                        build job: '80-ecr', parameters: [string(name: 'ACTION', value: 'DESTROY')], wait: false
                    }
                }
                stage('ALB') {
                    steps {
                        build job: '70-alb', parameters: [string(name: 'ACTION', value: 'DESTROY')], wait: false
                    }
                }
               stage('ACM') {
                    steps {
                        build job: '60-acm', parameters: [string(name: 'ACTION', value: 'DESTROY')], wait: false
                    }
                }
                stage('EKS') {
                    steps {
                        build job: '50-eks', parameters: [string(name: 'ACTION', value: 'DESTROY')], wait: false
                    }
                }
                stage('BASTION') {
                    steps {
                        build job: '30-bastion', parameters: [string(name: 'ACTION', value: 'DESTROY')], wait: false
                    }
                }
                
            }
            
        }
        stage('SG-Destroy'){
            steps {
                build job: '20-sg', parameters: [string(name: 'ACTION', value: 'DESTROY')], wait: false
            }

        }
        stage('VPC-Destroy'){
            steps {
                build job: '10-vpc', parameters: [string(name: 'ACTION', value: 'DESTROY')], wait: false
            }

        }   */  
        stage('Destroy'){
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps{
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    script {
                        def directories = ['90-cdn', '80-ecr', '70-alb', '60-acm', '50-eks', '40-rds', '30-bastion', '20-sg', '10-vpc']
                        for (dir in directories) {
                            echo "Destroying resources in directory: ${dir}"
                            sh """
                                cd ${dir}
                                terraform init -reconfigure
                                terraform destroy -auto-approve || { echo "Failed to destroy resources in ${dir}"; exit 1; }
                                cd ..
                            """
                        }
                    }
                }
            }
        }    
        
    }
    post{
        always{
            sh 'echo This runs always'
            deleteDir()
        }
        success{
            sh 'echo This runs when pipeline is success'
        }
        failure{
            sh 'echo This runs when pipeline fails'
        }
    }
}