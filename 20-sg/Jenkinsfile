pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time:30, unit:'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
        //retry(1)
    }
    parameters{
        choice(name: 'ACTION', choices: ['APPLY', 'DESTROY'], description: 'Select Action')

    }
   

    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                    sh """
                        cd 20-sg
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }
        
        stage('Apply or Destroy') {
            // input {
            //     message "Should we continue to $params.ACTION?"
            //     ok "Yes,we should."
            // }    
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                    sh """
                        cd 20-sg
                        if [ $params.ACTION == 'APPLY' ]
                        then
                            terraform apply -auto-approve tfplan
                        elif [ $parms.ACTION == 'DESTROY' ]
                        then
                            terraform destroy -auto-approve
                        fi
                    """    
                }
            }
        }
    //     stage ('Destroy VPC') {
    //        when {
    //             expression { parms.ACTION == 'DESTROY'}
    //         }
    //         steps{
    //             build job: '10-vpc', parameters: [string(name: 'ACTION', value: 'DESTROY')], wait: false
    //         }
    //     }
    //    stage('Parallel') {
    //         when{
    //             expression { parms.ACTION == 'APPLY'}
    //         }
    //         parallel {
    //             stage('Bastion') {
    //                 steps {
    //                     build job: '30-bastion', parameters: [string(name: 'ACTION', value: 'APPLY')], wait: false
    //                 }
    //             }
    //              stage('RDS') {
    //                 steps {
    //                     build job: '40-rds', parameters: [string(name: 'ACTION', value: 'APPLY')], wait: false
    //                 }
    //             }
    //            stage('EKS') {
    //                 steps {
    //                     build job: '50-eks', parameters: [string(name: 'ACTION', value: 'APPLY')], wait: false
    //                 }
    //             }
                
    //             stage('ECR') {
    //                 steps {
    //                     build job: '80-ecr', parameters: [string(name: 'ACTION', value: 'APPLY')], wait: false
    //                 }
    //             }
    //         }
    //     }
    //      stage('Sequential') {
    //         when{
    //             expression { parms.ACTION == 'APPLY'}
    //         }
    //         parallel {
    //             stage('ACM') {
    //                 steps {
    //                     build job: '60-acm', parameters: [string(name: 'ACTION', value: 'APPLY')]
    //                 }
    //             }
    //             stage('ALB') {
    //                 steps {
    //                     build job: '70-alb', parameters: [string(name: 'ACTION', value: 'APPLY')], wait: false
    //                 }
    //             }
    //             stage('CDN') {
    //                 steps {
    //                     build job: '90-cdn', parameters: [string(name: 'ACTION', value: 'APPLY')], wait: false
    //                 }
    //             }
    //         }
    //     }
        
        
    }
    post{
        always{
            sh 'echo This runs always'
            deleteDir()
        }
        success{
            sh 'echo This runs when pipeline is success'
        }
        failure{
            sh 'echo This runs when pipeline fails'
        }
    }
}